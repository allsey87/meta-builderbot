From cc140fffeddd713f3f07fb0333ef738a7ef59c84 Mon Sep 17 00:00:00 2001
From: Condor3397 <freedomcondor@126.com>
Date: Fri, 18 Oct 2019 11:14:24 +0200
Subject: [PATCH] Workaround for hardware

---
 src/core/CMakeLists.txt            |  13 ++-
 src/core/hardware/actuator.h       |  63 +++++++++++
 src/core/hardware/sensor.h         |  64 ++++++++++++
 src/core/real_robot/real_robot.cpp | 162 -----------------------------
 src/core/real_robot/real_robot.h   |  90 ----------------
 5 files changed, 133 insertions(+), 259 deletions(-)
 create mode 100644 src/core/hardware/actuator.h
 create mode 100644 src/core/hardware/sensor.h
 delete mode 100644 src/core/real_robot/real_robot.cpp
 delete mode 100644 src/core/real_robot/real_robot.h

diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index 56fb7ea..5b0f4b8 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -109,6 +109,10 @@ set(ARGOS3_HEADERS_SIMULATOR_SPACE
   simulator/space/space_multi_thread_balance_length.h
   simulator/space/space_multi_thread_balance_quantity.h
   simulator/space/space_no_threads.h)
+# argos3/core/hardware
+set(ARGOS3_HEADERS_HARDWARE
+  hardware/actuator.h
+  hardware/sensor.h)
 # argos3/core/wrappers/lua
 set(ARGOS3_HEADERS_WRAPPERS_LUA
   wrappers/lua/lua_controller.h
@@ -116,9 +120,6 @@ set(ARGOS3_HEADERS_WRAPPERS_LUA
   wrappers/lua/lua_utility.h
   wrappers/lua/lua_vector2.h
   wrappers/lua/lua_vector3.h)
-# argos3/core/real_robot
-set(ARGOS3_HEADERS_REALROBOT
-  real_robot/real_robot.h)
 
 #
 # Source files
@@ -197,11 +198,9 @@ if(ARGOS_BUILD_FOR_SIMULATOR)
     simulator/space/space_multi_thread_balance_quantity.cpp
     simulator/space/space_no_threads.cpp)
 else(ARGOS_BUILD_FOR_SIMULATOR)
-  # Real-robot only code
   set(ARGOS3_SOURCES_CORE
     ${ARGOS3_SOURCES_CORE}
-    ${ARGOS3_HEADERS_REALROBOT}
-    real_robot/real_robot.cpp)
+    ${ARGOS3_HEADERS_HARDWARE})
 endif(ARGOS_BUILD_FOR_SIMULATOR)
 # Compile Lua wrapper only if Lua was found
 if(ARGOS_WITH_LUA)
@@ -260,7 +259,7 @@ if(ARGOS_BUILD_FOR_SIMULATOR)
   install(FILES ${ARGOS3_HEADERS_SIMULATOR_SPACE_POSITIONAL_INDICES} DESTINATION include/argos3/core/simulator/space/positional_indices)
   install(FILES ${ARGOS3_HEADERS_SIMULATOR_SPACE}             DESTINATION include/argos3/core/simulator/space)
 else(ARGOS_BUILD_FOR_SIMULATOR)
-  install(FILES ${ARGOS3_HEADERS_REALROBOT}                   DESTINATION include/argos3/core/real_robot)
+  install(FILES ${ARGOS3_HEADERS_HARDWARE}                    DESTINATION include/argos3/core/hardware)
 endif(ARGOS_BUILD_FOR_SIMULATOR)
 if(ARGOS_WITH_LUA)
   install(FILES ${ARGOS3_HEADERS_WRAPPERS_LUA}                DESTINATION include/argos3/core/wrappers/lua)
diff --git a/src/core/hardware/actuator.h b/src/core/hardware/actuator.h
new file mode 100644
index 0000000..8fa57db
--- /dev/null
+++ b/src/core/hardware/actuator.h
@@ -0,0 +1,63 @@
+/**
+ * @file <argos3/core/hardware/actuator.h>
+ *
+ * @author Michael Allwright - <allsey87@gmail.com>
+ */
+
+#ifndef PHYSICAL_ACTUATOR_H
+#define PHYSICAL_ACTUATOR_H
+
+#include <argos3/core/utility/plugins/factory.h>
+
+namespace argos {
+
+   /**
+    * The basic interface for a physical actuator.
+    * To implement the physical model of an actuator, you must define a class
+    * that inherits from both the control interface and this class.
+    * @see CCI_Actuator
+    */
+   class CPhysicalActuator {
+
+   public:
+
+      /**
+       * Class destructor.
+       */
+      virtual ~CPhysicalActuator() {}
+
+      /**
+       * Updates the state of the entity associated to this actuator.
+       */
+      virtual void Update() = 0;
+
+   };
+
+   /****************************************/
+   /****************************************/
+
+}
+
+/**
+ * Registers a new actuator model inside ARGoS.
+ * You must register your actuator model for ARGoS to be able to recognize it.
+ * This statement must be included in a .cpp file. It can't be in a header.
+ */
+#define REGISTER_ACTUATOR(CLASSNAME,                        \
+                          LABEL,                            \
+                          IMPLEMENTATION,                   \
+                          AUTHOR,                           \
+                          VERSION,                          \
+                          BRIEF_DESCRIPTION,                \
+                          LONG_DESCRIPTION,                 \
+                          STATUS)                           \
+   REGISTER_SYMBOL(CPhysicalActuator,                      \
+                   CLASSNAME,                               \
+                   LABEL " (" IMPLEMENTATION ")",           \
+                   AUTHOR,                                  \
+                   VERSION,                                 \
+                   BRIEF_DESCRIPTION,                       \
+                   LONG_DESCRIPTION,                        \
+                   STATUS)
+
+#endif
diff --git a/src/core/hardware/sensor.h b/src/core/hardware/sensor.h
new file mode 100644
index 0000000..b4fd980
--- /dev/null
+++ b/src/core/hardware/sensor.h
@@ -0,0 +1,64 @@
+/**
+ * @file <argos3/core/hardware/sensor.h>
+ *
+ * @author Michael Allwright - <allsey87@gmail.com>
+ */
+
+#ifndef PHYSICAL_SENSOR_H
+#define PHYSICAL_SENSOR_H
+
+#include <argos3/core/utility/plugins/factory.h>
+
+namespace argos {
+
+   /**
+    * The basic interface for a physical sensor.
+    * To implement the physical model of an sensor, you must define a class
+    * that inherits from both the control interface and this class.
+    * @see CCI_Sensor
+    */
+   class CPhysicalSensor {
+
+   public:
+
+      /**
+       * Class destructor.
+       */
+      virtual ~CPhysicalSensor() {}
+
+      /**
+       * Updates the sensor with readings from the hardware.
+       */
+      virtual void Update() = 0;
+
+   };
+
+   /****************************************/
+   /****************************************/
+
+}
+
+/**
+ * Registers a new sensor model inside ARGoS.
+ * You must register your sensor model for ARGoS to be able to recognize it.
+ * This statement must be included in a .cpp file. It can't be in a header.
+ */
+#define REGISTER_SENSOR(CLASSNAME,                          \
+                        LABEL,                              \
+                        IMPLEMENTATION,                     \
+                        AUTHOR,                             \
+                        VERSION,                            \
+                        BRIEF_DESCRIPTION,                  \
+                        LONG_DESCRIPTION,                   \
+                        STATUS)                             \
+   REGISTER_SYMBOL(CPhysicalSensor,                         \
+                   CLASSNAME,                               \
+                   LABEL " (" IMPLEMENTATION ")",           \
+                   AUTHOR,                                  \
+                   VERSION,                                 \
+                   BRIEF_DESCRIPTION,                       \
+                   LONG_DESCRIPTION,                        \
+                   STATUS)
+
+#endif
+
diff --git a/src/core/real_robot/real_robot.cpp b/src/core/real_robot/real_robot.cpp
deleted file mode 100644
index 2fefb1e..0000000
--- a/src/core/real_robot/real_robot.cpp
+++ /dev/null
@@ -1,162 +0,0 @@
-#include "real_robot.h"
-#include <argos3/core/utility/rate.h>
-#include <argos3/core/utility/logging/argos_log.h>
-#include <argos3/core/control_interface/ci_controller.h>
-#include <signal.h>
-#include <unistd.h>
-
-using namespace argos;
-
-/****************************************/
-/****************************************/
-
-CRealRobot* CRealRobot::m_pcInstance = NULL;
-
-/****************************************/
-/****************************************/
-
-CRealRobot::CRealRobot() :
-   m_pcController(NULL) {
-   /* Set instance */
-   m_pcInstance = this;
-}
-
-/****************************************/
-/****************************************/
-
-void CRealRobot::Init(const std::string& str_conf_fname,
-                      const std::string& str_controller_id) {
-   /* Parse the .argos file */
-   m_tConfiguration.LoadFile(str_conf_fname);
-   m_tConfRoot = *m_tConfiguration.FirstChildElement();
-   /*
-    * Install signal handlers
-    */
-   ::signal(SIGINT, Cleanup);
-   ::signal(SIGQUIT, Cleanup);
-   ::signal(SIGABRT, Cleanup);
-   ::signal(SIGTERM, Cleanup);
-   /*
-    * Get the control rate
-    */
-   TConfigurationNode& tFramework = GetNode(m_tConfRoot, "framework");
-   TConfigurationNode& tExperiment = GetNode(tFramework, "experiment");
-   GetNodeAttribute(tExperiment, "ticks_per_second", m_fRate);
-   /*
-    * Parse XML to identify the controller to run
-    */
-   std::string strControllerId, strControllerTag;
-   TConfigurationNode& tControllers = GetNode(m_tConfRoot, "controllers");
-   TConfigurationNodeIterator itControllers;
-   /* Search for the controller tag with the given id */
-   for(itControllers = itControllers.begin(&tControllers);
-       itControllers != itControllers.end() && strControllerTag == "";
-       ++itControllers) {
-      GetNodeAttribute(*itControllers, "id", strControllerId);
-      if(strControllerId == str_controller_id) {
-         strControllerTag = itControllers->Value();
-         m_ptControllerConfRoot = &(*itControllers);
-      }
-   }
-   /* Make sure we found the tag */
-   if(strControllerTag == "") {
-      THROW_ARGOSEXCEPTION("Can't find controller with id \"" << str_controller_id << "\"");
-   }
-   /*
-    * Initialize the robot
-    */
-   LOG << "[INFO] Robot initialization start" << std::endl;
-   InitRobot();
-   LOG << "[INFO] Robot initialization done" << std::endl;
-   /*
-    * Initialize the controller
-    */
-   LOG << "[INFO] Controller type '" << strControllerTag << "', id '" << str_controller_id << "' initialization start" << std::endl;
-   m_pcController = ControllerMaker(strControllerTag);
-   /* Set the controller id using the machine hostname */
-   char pchHostname[256];
-   pchHostname[255] = '\0';
-   ::gethostname(pchHostname, 255);
-   m_pcController->SetId(pchHostname);
-   LOG << "[INFO] Controller id set to '" << pchHostname << "'" << std::endl;
-   /* Go through actuators */
-   TConfigurationNode& tActuators = GetNode(*m_ptControllerConfRoot, "actuators");
-   TConfigurationNodeIterator itAct;
-   for(itAct = itAct.begin(&tActuators);
-       itAct != itAct.end();
-       ++itAct) {
-      /* itAct->Value() is the name of the current actuator */
-      CCI_Actuator* pcCIAct = MakeActuator(itAct->Value());
-      if(pcCIAct == NULL) {
-         THROW_ARGOSEXCEPTION("Unknown actuator \"" << itAct->Value() << "\"");
-      }
-      pcCIAct->Init(*itAct);
-      m_pcController->AddActuator(itAct->Value(), pcCIAct);
-   }
-   /* Go through sensors */
-   TConfigurationNode& tSensors = GetNode(*m_ptControllerConfRoot, "sensors");
-   TConfigurationNodeIterator itSens;
-   for(itSens = itSens.begin(&tSensors);
-       itSens != itSens.end();
-       ++itSens) {
-      /* itSens->Value() is the name of the current sensor */
-      CCI_Sensor* pcCISens = MakeSensor(itSens->Value());
-      if(pcCISens == NULL) {
-         THROW_ARGOSEXCEPTION("Unknown sensor \"" << itSens->Value() << "\"");
-      }
-      pcCISens->Init(*itSens);
-      m_pcController->AddSensor(itSens->Value(), pcCISens);
-   }
-   /* Configure the controller */
-   m_pcController->Init(GetNode(*m_ptControllerConfRoot, "params"));
-   LOG << "[INFO] Controller type '" << strControllerTag << "', id '" << str_controller_id << "' initialization done" << std::endl;
-}
-
-/****************************************/
-/****************************************/
-
-CRealRobot::~CRealRobot() {
-   if(m_pcController)
-      delete m_pcController;
-}
-
-/****************************************/
-/****************************************/
-
-void CRealRobot::Control() {
-   m_pcController->ControlStep();
-}
-
-/****************************************/
-/****************************************/
-
-void CRealRobot::Execute() {
-   /* Enforce the control rate */
-   CRate cRate(m_fRate);
-   /* Main loop */
-   LOG << "[INFO] Control loop running" << std::endl;
-   while(1) {
-      /* Do useful work */
-      Sense();
-      Control();
-      Act();
-      /* Sleep to enforce control rate */
-      cRate.Sleep();
-   }
-}
-
-/****************************************/
-/****************************************/
-
-void CRealRobot::Cleanup(int) {
-   LOG << "[INFO] Stopping controller" << std::endl;
-   if(m_pcInstance != NULL) {
-      m_pcInstance->Destroy();
-      delete m_pcInstance;
-   }
-   LOG << "[INFO] All done" << std::endl;
-   exit(0);
-}
-
-/****************************************/
-/****************************************/
diff --git a/src/core/real_robot/real_robot.h b/src/core/real_robot/real_robot.h
deleted file mode 100644
index 207eb2e..0000000
--- a/src/core/real_robot/real_robot.h
+++ /dev/null
@@ -1,90 +0,0 @@
-#ifndef REAL_ROBOT_H
-#define REAL_ROBOT_H
-
-#include <argos3/core/utility/configuration/argos_configuration.h>
-#include <argos3/core/control_interface/ci_controller.h>
-
-namespace argos {
-
-   class CRealRobot {
-
-   public:
-
-      /**
-       * Class constructor.
-       */
-      CRealRobot();
-      
-      /**
-       * Class destructor.
-       */
-      virtual ~CRealRobot();
-
-      /**
-       * Initializes the robot and the controller.
-       * Internally calls InitRobot() and InitController() in this order.
-       */
-      virtual void Init(const std::string& str_conf_fname,
-                        const std::string& str_controller_id);
-
-      /**
-       * Put your robot initialization code here.
-       */
-      virtual void InitRobot() = 0;
-
-      /**
-       * Put your robot cleanup code here.
-       */
-      virtual void Destroy() = 0;
-
-      /**
-       * Creates an actuator given its name.
-       * Returns NULL if no actuator corresponds to that name.
-       */
-      virtual CCI_Actuator* MakeActuator(const std::string& str_name) = 0;
-
-      /**
-       * Creates a sensor given its name.
-       * Returns NULL if no sensor corresponds to that name.
-       */
-      virtual CCI_Sensor* MakeSensor(const std::string& str_name) = 0;
-
-      /**
-       * Collect data from the sensors.
-       */
-      virtual void Sense() = 0;
-      
-      /**
-       * Execute the robot controller.
-       */
-      virtual void Control();
-      
-      /**
-       * Send data to the actuators.
-       */
-      virtual void Act() = 0;
-
-      /**
-       * Performs the main loop.
-       */
-      virtual void Execute();
-
-      /**
-       * Cleanup function called when the controller is stopped.
-       */
-      static void Cleanup(int);
-
-   protected:
-
-      CCI_Controller* m_pcController;
-      ticpp::Document m_tConfiguration;
-      TConfigurationNode m_tConfRoot;
-      TConfigurationNode* m_ptControllerConfRoot;
-      Real m_fRate;
-      static CRealRobot* m_pcInstance;
-      
-   };
-   
-}
-
-#endif
-- 
2.17.1

