From e185a261d4fffe81e9d75882217f13d622ae21b7 Mon Sep 17 00:00:00 2001
From: Michael Allwright <allsey87@gmail.com>
Date: Thu, 2 Aug 2018 17:25:00 +0200
Subject: [PATCH] vcnl4000: Add device tree and software buffer support

---
 drivers/iio/light/Kconfig    |   2 +
 drivers/iio/light/vcnl4000.c | 232 +++++++++++++++++++++++++++++++++++--------
 2 files changed, 191 insertions(+), 43 deletions(-)

diff --git a/drivers/iio/light/Kconfig b/drivers/iio/light/Kconfig
index 93fd421..8763f25 100644
--- a/drivers/iio/light/Kconfig
+++ b/drivers/iio/light/Kconfig
@@ -421,6 +421,8 @@ config US5182D
 
 config VCNL4000
 	tristate "VCNL4000/4010/4020 combined ALS and proximity sensor"
+	select IIO_BUFFER
+	select IIO_TRIGGERED_BUFFER
 	depends on I2C
 	help
 	 Say Y here if you want to build a driver for the Vishay VCNL4000,
diff --git a/drivers/iio/light/vcnl4000.c b/drivers/iio/light/vcnl4000.c
index c599a90..c55b5e5 100644
--- a/drivers/iio/light/vcnl4000.c
+++ b/drivers/iio/light/vcnl4000.c
@@ -21,9 +21,12 @@
 #include <linux/i2c.h>
 #include <linux/err.h>
 #include <linux/delay.h>
-
+#include <linux/iio/buffer.h>
 #include <linux/iio/iio.h>
 #include <linux/iio/sysfs.h>
+#include <linux/iio/trigger_consumer.h>
+#include <linux/iio/triggered_buffer.h>
+#include <linux/regulator/consumer.h>
 
 #define VCNL4000_DRV_NAME "vcnl4000"
 #define VCNL4000_ID		0x01
@@ -46,77 +49,163 @@
 #define VCNL4000_AL_OD		BIT(4) /* start on-demand ALS measurement */
 #define VCNL4000_PS_OD		BIT(3) /* start on-demand proximity measurement */
 
-struct vcnl4000_data {
-	struct i2c_client *client;
-	struct mutex lock;
-};
+#define VCNL4000_RDY		(VCNL4000_AL_RDY | VCNL4000_PS_RDY) /* data ready? */
 
 static const struct i2c_device_id vcnl4000_id[] = {
 	{ "vcnl4000", 0 },
-	{ }
+	{ "vcnl4010", 0 },
+	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(i2c, vcnl4000_id);
 
+static const struct of_device_id of_vcnl4000_ids[] = {
+	{ .compatible = "vishay,vcnl4000" },
+	{ .compatible = "vishay,vcnl4010" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, of_vcnl4000_ids);
+
+struct vcnl4000_data {
+	struct i2c_client *client;
+	struct mutex lock;
+	struct regulator *regulator;
+	const char *label;
+};
+
+static irqreturn_t vcnl4000_trigger_handler(int irq, void *p)
+{
+	struct iio_poll_func *pf = p;
+	struct iio_dev *indio_dev = pf->indio_dev;
+	struct vcnl4000_data* data = iio_priv(indio_dev);
+
+	int ret;
+	int tries = 20;
+	__be16 buf[2];
+
+	mutex_lock(&data->lock);
+	ret = i2c_smbus_write_byte_data(data->client, VCNL4000_COMMAND,
+					VCNL4000_AL_OD | VCNL4000_PS_OD);
+
+	if(ret < 0) {
+		goto out;
+	}
+
+	while (tries--) {
+		usleep_range(10000, 20000); /* measurement takes up to 100 ms */
+		ret = i2c_smbus_read_byte_data(data->client, VCNL4000_COMMAND);
+		if (ret < 0) {
+			goto out;
+		}
+		if ((ret & VCNL4000_RDY) == VCNL4000_RDY)
+			break;
+	}
+
+	if(tries == 0) {
+		goto out;
+	}
+
+	ret = i2c_smbus_read_i2c_block_data(data->client, VCNL4000_AL_RESULT_HI,
+					    sizeof(buf), (u8 *) &buf);
+
+	if (ret < 0)
+		goto out;
+
+	iio_push_to_buffers_with_timestamp(indio_dev, buf,
+					   iio_get_time_ns(indio_dev));
+ out:
+	mutex_unlock(&data->lock);
+	iio_trigger_notify_done(indio_dev->trig);
+	return IRQ_HANDLED;
+}
+
 static int vcnl4000_measure(struct vcnl4000_data *data, u8 req_mask,
-				u8 rdy_mask, u8 data_reg, int *val)
+			    u8 rdy_mask, u8 data_reg, int *val)
 {
 	int tries = 20;
 	__be16 buf;
-	int ret;
+	int ret = 0;
 
 	mutex_lock(&data->lock);
 
 	ret = i2c_smbus_write_byte_data(data->client, VCNL4000_COMMAND,
 					req_mask);
 	if (ret < 0)
-		goto fail;
+		goto out;
 
 	/* wait for data to become ready */
 	while (tries--) {
+		usleep_range(10000, 20000); /* measurement takes up to 100 ms */
 		ret = i2c_smbus_read_byte_data(data->client, VCNL4000_COMMAND);
 		if (ret < 0)
-			goto fail;
+			goto out;
 		if (ret & rdy_mask)
 			break;
-		msleep(20); /* measurement takes up to 100 ms */
 	}
 
 	if (tries < 0) {
 		dev_err(&data->client->dev,
 			"vcnl4000_measure() failed, data not ready\n");
 		ret = -EIO;
-		goto fail;
+		goto out;
 	}
 
 	ret = i2c_smbus_read_i2c_block_data(data->client,
-		data_reg, sizeof(buf), (u8 *) &buf);
+					    data_reg, sizeof(buf), (u8 *) &buf);
 	if (ret < 0)
-		goto fail;
+		goto out;
 
-	mutex_unlock(&data->lock);
 	*val = be16_to_cpu(buf);
-
-	return 0;
-
-fail:
+ out:
 	mutex_unlock(&data->lock);
 	return ret;
 }
 
+static ssize_t vcnl4000_read_label(struct iio_dev *indio_dev,
+				   uintptr_t private,
+				   const struct iio_chan_spec *chan,
+				   char *buf)
+{
+	struct vcnl4000_data *data = iio_priv(indio_dev);
+
+	return sprintf(buf, "%s\n", data->label);
+}
+
+
+static const struct iio_chan_spec_ext_info vcnl4000_ext_info[] = {
+	{ .name = "label",
+	  .read = vcnl4000_read_label,
+	  .shared = IIO_SHARED_BY_ALL,
+	}, { /* sentinel */ },
+};
+
 static const struct iio_chan_spec vcnl4000_channels[] = {
 	{
 		.type = IIO_LIGHT,
-		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
-			BIT(IIO_CHAN_INFO_SCALE),
+		.ext_info = vcnl4000_ext_info,
+		.scan_index = 0,
+		.scan_type = {
+			.sign = 'u',
+			.realbits = 16,
+			.storagebits = 16,
+			.endianness = IIO_BE,
+		},
 	}, {
 		.type = IIO_PROXIMITY,
-		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW),
-	}
+		.ext_info = vcnl4000_ext_info,
+		.scan_index = 1,
+		.scan_type = {
+			.sign = 'u',
+			.realbits = 16,
+			.storagebits = 16,
+			.endianness = IIO_BE,
+		},
+	},
+	IIO_CHAN_SOFT_TIMESTAMP(2),
 };
 
 static int vcnl4000_read_raw(struct iio_dev *indio_dev,
-				struct iio_chan_spec const *chan,
-				int *val, int *val2, long mask)
+			     struct iio_chan_spec const *chan,
+			     int *val, int *val2, long mask)
 {
 	int ret;
 	struct vcnl4000_data *data = iio_priv(indio_dev);
@@ -126,33 +215,28 @@ static int vcnl4000_read_raw(struct iio_dev *indio_dev,
 		switch (chan->type) {
 		case IIO_LIGHT:
 			ret = vcnl4000_measure(data,
-				VCNL4000_AL_OD, VCNL4000_AL_RDY,
-				VCNL4000_AL_RESULT_HI, val);
+					       VCNL4000_AL_OD, VCNL4000_AL_RDY,
+					       VCNL4000_AL_RESULT_HI, val);
 			if (ret < 0)
 				return ret;
 			return IIO_VAL_INT;
 		case IIO_PROXIMITY:
 			ret = vcnl4000_measure(data,
-				VCNL4000_PS_OD, VCNL4000_PS_RDY,
-				VCNL4000_PS_RESULT_HI, val);
+					       VCNL4000_PS_OD, VCNL4000_PS_RDY,
+					       VCNL4000_PS_RESULT_HI, val);
 			if (ret < 0)
 				return ret;
 			return IIO_VAL_INT;
 		default:
 			return -EINVAL;
 		}
-	case IIO_CHAN_INFO_SCALE:
-		if (chan->type != IIO_LIGHT)
-			return -EINVAL;
-
-		*val = 0;
-		*val2 = 250000;
-		return IIO_VAL_INT_PLUS_MICRO;
 	default:
 		return -EINVAL;
 	}
 }
 
+static const unsigned long vcnl4000_scan_masks[] = {0x3, 0};
+
 static const struct iio_info vcnl4000_info = {
 	.read_raw = vcnl4000_read_raw,
 };
@@ -171,35 +255,97 @@ static int vcnl4000_probe(struct i2c_client *client,
 	data = iio_priv(indio_dev);
 	i2c_set_clientdata(client, indio_dev);
 	data->client = client;
+
+	ret = of_property_read_string(client->dev.of_node, "label", &data->label);
+
+	if (ret < 0) {
+		dev_err(&client->dev, "Failed to read label property: %d\n", ret);
+		return ret;
+	}
+
+	data->regulator = devm_regulator_get(&client->dev, "vdd");
+
+	if(IS_ERR(data->regulator))
+		return -EPROBE_DEFER;
+
+	ret = regulator_enable(data->regulator);
+	if(ret) {
+		dev_err(&client->dev, "Failed to enable regulator: %d", ret);
+		return ret;
+	}
+	msleep(500);
+
 	mutex_init(&data->lock);
 
 	ret = i2c_smbus_read_byte_data(data->client, VCNL4000_PROD_REV);
-	if (ret < 0)
-		return ret;
+	if (ret < 0) {
+		goto out_disable_regulator;
+	}
 
 	prod_id = ret >> 4;
-	if (prod_id != VCNL4010_ID && prod_id != VCNL4000_ID)
-		return -ENODEV;
+	if (prod_id != VCNL4010_ID && prod_id != VCNL4000_ID) {
+		ret = -ENODEV;
+		goto out_disable_regulator;
+	}
 
 	dev_dbg(&client->dev, "%s Ambient light/proximity sensor, Rev: %02x\n",
 		(prod_id == VCNL4010_ID) ? "VCNL4010/4020" : "VCNL4000",
 		ret & 0xf);
 
+	indio_dev->name = VCNL4000_DRV_NAME;
 	indio_dev->dev.parent = &client->dev;
 	indio_dev->info = &vcnl4000_info;
+	indio_dev->direction = IIO_DEVICE_DIRECTION_IN;
+	indio_dev->modes = INDIO_DIRECT_MODE | INDIO_BUFFER_SOFTWARE;
 	indio_dev->channels = vcnl4000_channels;
 	indio_dev->num_channels = ARRAY_SIZE(vcnl4000_channels);
-	indio_dev->name = VCNL4000_DRV_NAME;
-	indio_dev->modes = INDIO_DIRECT_MODE;
+	indio_dev->available_scan_masks = vcnl4000_scan_masks;
+	ret = iio_triggered_buffer_setup(indio_dev, iio_pollfunc_store_time,
+					 vcnl4000_trigger_handler, NULL);
+	if (ret) {
+		dev_err(&client->dev, "triggered buffer setup failed\n");
+		goto out_disable_regulator;
+	}
+
+	ret = iio_device_register(indio_dev);
+	if (ret) {
+		dev_err(&client->dev, "device registration failed\n");
+		goto out_remove_trigger;
+	}
+
+	return 0;
+
+ out_remove_trigger:
+	iio_triggered_buffer_cleanup(indio_dev);
 
-	return devm_iio_device_register(&client->dev, indio_dev);
+ out_disable_regulator:
+	if (!IS_ERR(data->regulator)) {
+		regulator_disable(data->regulator);
+	}
+	return ret;
+}
+
+static int vcnl4000_remove(struct i2c_client *client)
+{
+	struct iio_dev *indio_dev = i2c_get_clientdata(client);
+	struct vcnl4000_data *data = iio_priv(indio_dev);
+
+	iio_triggered_buffer_cleanup(indio_dev);
+	iio_device_unregister(indio_dev);
+
+	if (!IS_ERR(data->regulator)) {
+		regulator_disable(data->regulator);
+	}
+	return 0;
 }
 
 static struct i2c_driver vcnl4000_driver = {
 	.driver = {
 		.name   = VCNL4000_DRV_NAME,
+		.of_match_table = of_match_ptr(of_vcnl4000_ids),
 	},
 	.probe  = vcnl4000_probe,
+	.remove  = vcnl4000_remove,
 	.id_table = vcnl4000_id,
 };
 
-- 
2.7.4

